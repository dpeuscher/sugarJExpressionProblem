package sugarJExpressionProblem;

import org.sugarj.languages.Java;
import concretesyntax.Java;
import IntAlgSuper;

public sugar IntAlgSubtest {
  rules
	typeList:
   		("IntAlg") -> <strip-annos>[("Lit",["Integer"])]
   	typeList:
   		("IntAlgSub") -> <nub><strip-annos><concat>[[("Sub",["Methods","Methods"])],<typeList>("IntAlg")]
   	typeList:
   		("IntAlgCount") -> <union><strip-annos>([("Lit",["Integer"])],<typeList>("IntAlg"))
   	typeListParents:
   		("IntAlgSubCount") -> <union><strip-annos>(<typeList>("IntAlgSub"),<typeList>("IntAlgCount"))
   	typeList:
   		("IntAlgSubCount") -> <nub><strip-annos><concat>[[("Sub",["Methods","Methods"])],<typeListParents>("IntAlgSubCount")]
   	methodList:
   		("IntAlg") -> <strip-annos>([("print",["String"])])
   	methodList:
   		("IntAlgSub") -> <union><strip-annos>([("print",["String"])],<methodList>("IntAlg"))
   	methodList:
   		("IntAlgCount") -> <union><strip-annos>([("count",[])],<methodList>("IntAlg"))
   	methodList:
   		("IntAlgSubCount") -> <union><strip-annos>([("count",[])],<methodList>("IntAlgSub"),<methodList>("IntAlgCount"))
	
	typeHead:
   		("Sub",["Methods","Methods"]) -> <read-from-string> "(MethodDecHead(
              [Public()]
            , None()
            , ClassOrInterfaceType(TypeName(Id(\"Methods\")), None())
            , Id(\"Sub\")
            , [Param(
             				[Final()]
           					, ClassOrInterfaceType(TypeName(Id(\"Methods\")), None())
           					, Id(\"e1\")
           				),
				Param(
	 				[Final()]
					, ClassOrInterfaceType(TypeName(Id(\"Methods\")), None())
					, Id(\"e2\")
				)] 
            , None()
            ),[ExprName(Id(\"e1\")),ExprName(Id(\"e2\"))])"
    typeHead:
   		("Lit",["Integer"]) -> (MethodDecHead(
              [Public()]
            , None()
            , ClassOrInterfaceType(TypeName(Id("Methods")), None())
            , Id("Lit")
            , [Param(
             				[Final()]
           					, ClassOrInterfaceType(TypeName(Id("Integer")), None())
           					, Id("x")
           				)] // <virtual-params-to-interface-replace <+ virtual-params-to-interface> (virtualParams,familyname,familyname,[Final()])
            , None()
            ),[ExprName(Id("x"))])
    methodHead:
    	("print",["String"]) -> (
    		MethodDecHead(
              [Public()]
            , None()
            , ClassOrInterfaceType(TypeName(Id("String")), None())
            , Id("print")
            , [Param(
                 []
               , ClassOrInterfaceType(TypeName(Id("String")), None())
               , Id("prefix")
               )]
            , None()
            ),
            [ExprName(Id("prefix"))]
    	)
    methodHead:
    	("count",[]) -> (
    		MethodDecHead(
              [Public()]
            , None()
            , ClassOrInterfaceType(TypeName(Id("Integer")), None())
            , Id("count")
            , []
            , None()
            ),
            []
    	)
}